#BlueJ class context
comment0.target=GraphInterface
comment0.text=\r\n\ The\ graphs\ interface\r\n\r\n\ @author\ (your\ name)\r\n\ @version\ 30/04/2020\r\n
comment1.params=n
comment1.target=Vertex\ insertVertex(java.lang.String)
comment1.text=\r\n\ Inserts\ a\ vertex\ into\ the\ graph.\r\n\r\n\ @param\ \ n\ \ The\ name\ you\ want\ to\ assign\ to\ the\ new\ vertex\r\n\ @return\ \ \ \ The\ new\ vertex\ which\ has\ been\ inserted\r\n
comment10.params=o\ n
comment10.target=java.lang.String\ rename(NameCommon,\ java.lang.String)
comment10.text=\r\n\ Renames\ the\ vertex\ or\ edge\r\n\r\n\ @param\ \ o\ \ the\ object\ you\ want\ to\ rename\r\n\ @param\ \ n\ \ the\ new\ name\ for\ the\ object\r\n\ @return\ \ \ \ the\ old\ name\ of\ o\r\n
comment2.params=v
comment2.target=java.lang.String\ removeVertex(Vertex)
comment2.text=\r\n\ Removes\ a\ vertex\ from\ the\ graph\ and\ returns\ its\ name\r\n\r\n\ @param\ \ v\ \ The\ vertex\ you\ want\ to\ search\ for\ to\ remove\r\n\ @return\ \ \ \ The\ name\ of\ the\ vertex\ you\ deleted\r\n
comment3.params=v\ w\ n
comment3.target=Edge\ insertEdge(Vertex,\ Vertex,\ java.lang.String)
comment3.text=\r\n\ Inserts\ a\ edege\ between\ two\ verticies\r\n\r\n\ @param\ \ v\ \ The\ first\ vertex\ you\ want\ the\ edge\ to\ connect\ to\r\n\ @param\ \ w\ \ The\ second\ vertex\ you\ want\ to\ edge\ to\ connect\ to\r\n\ @param\ \ n\ \ The\ name\ of\ the\ edge\ you\ want\ to\ create\r\n
comment4.params=e
comment4.target=java.lang.String\ removeEdge(Edge)
comment4.text=\r\n\ Removes\ an\ edge\ from\ the\ graph\ and\ retruns\ the\ edges\ name\ you\ removed\r\n\r\n\ @param\ \ e\ \ The\ edge\ you\ want\ to\ remove\r\n\ @return\ \ \ \ The\ name\ of\ the\ edge\ you\ removed\r\n
comment5.params=e\ v
comment5.target=Vertex\ opposite(Edge,\ Vertex)
comment5.text=\r\n\ Gets\ the\ vertex\ opposite\ of\ v\ on\ edge\ e\r\n\r\n\ @param\ \ e\ \ The\ edge\ to\ want\ to\ find\ the\ opposite\ node\ of\r\n\ @param\ \ v\ \ The\ vertex\ you\ want\ to\ find\ the\ opposite\ of\r\n\ @return\ \ \ \ The\ opposite\ vertex\r\n
comment6.params=
comment6.target=java.util.ArrayList\ vertices()
comment6.text=\r\n\ Returns\ the\ verticies\ of\ the\ graph\r\n\r\n\ @return\ \ \ \ the\ verticies\ of\ the\ graph\r\n
comment7.params=
comment7.target=java.util.ArrayList\ edges()
comment7.text=\r\n\ Returns\ the\ edges\ of\ the\ graph\r\n\r\n\ @return\ \ \ \ all\ edges\ within\ the\ graph\r\n
comment8.params=v\ w
comment8.target=boolean\ areAdjacent(Vertex,\ Vertex)
comment8.text=\r\n\ Checks\ if\ two\ verticies\ are\ adjacent\r\n\r\n\ @param\ \ v\ \ The\ first\ vertex\ you\ want\ to\ comapare\r\n\ @param\ \ w\ \ The\ second\ vertex\ you\ want\ to\ comapare\r\n\ @return\ \ \ \ If\ v\ and\ w\ are\ adjacent,\ return\ true,\ else,\ false\r\n
comment9.params=v
comment9.target=java.util.ArrayList\ incidentEdges(Vertex)
comment9.text=\r\n\ Gets\ incident\ edges\ of\ vertex\ v\r\n\r\n\ @param\ \ v\ \ The\ vertex\ you\ want\ to\ get\ the\ incident\ edges\ from\r\n\ @return\ \ \ \ the\ edges\ incident\ of\ v\r\n
numComments=11
