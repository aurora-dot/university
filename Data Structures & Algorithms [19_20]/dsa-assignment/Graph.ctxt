#BlueJ class context
comment0.target=Graph
comment0.text=\r\n\ Graph\ Data\ Structure\r\n\r\n\ @author\ (your\ name)\r\n\ @version\ 30/04/2020\r\n
comment1.params=vertices\ edges
comment1.target=Graph(java.util.ArrayList,\ java.util.ArrayList)
comment1.text=\r\n\ Class\ constructor,\ sets\ verticies\ and\ edges\ of\ the\ graph\r\n\r\n\ @param\ \ verticies\ \ The\ verticies\ you\ want\ the\ graph\ to\ initially\ have\r\n\ @param\ \ edges\ \ The\ edges\ you\ want\ the\ graph\ to\ initially\ have\r\n
comment10.params=search\ query
comment10.target=boolean\ checkAdjacent(java.util.ArrayList,\ Vertex)
comment11.params=v
comment11.target=java.util.ArrayList\ incidentEdges(Vertex)
comment12.params=o\ n
comment12.target=java.lang.String\ rename(NameCommon,\ java.lang.String)
comment13.params=v
comment13.target=void\ bftTraverse(Vertex)
comment13.text=\r\n\ Breadth\ first\ traversal\ from\ vertex\ v,\ if\ v\ is\ null\ breadth\ first\ traversal\ over\ whole\ graph\ connected\ and\ not\ connected\r\n\r\n\ @param\ \ v\ \ The\ vertex\ to\ be\ traversed\ from,\ if\ null\ traverse\ over\ whole\ graph\r\n
comment14.params=
comment14.target=void\ unmarkAll()
comment15.params=origin\ small\ other
comment15.target=java.util.ArrayList\ bft(Vertex,\ boolean,\ boolean)
comment16.params=v
comment16.target=java.util.ArrayList\ allReachable(Vertex)
comment16.text=\r\n\ Get\ all\ vertcies\ from\ vertex\ v\r\n\r\n\ @param\ \ v\ \ The\ vertex\ you\ want\ to\ get\ all\ the\ reachable\ vertcies\ from\r\n\ @return\ \ \ \ All\ the\ reachable\ vertcies\ from\ vertex\ v\r\n
comment17.params=
comment17.target=boolean\ allConnected()
comment17.text=\r\n\ Returns\ if\ all\ vertcies\ are\ connected\ within\ the\ graph\r\n\r\n\ @return\ \ \ \ True\ if\ all\ are\ connected,\ false\ if\ otherwise\r\n
comment18.params=u\ v
comment18.target=java.util.ArrayList\ mostDirectRoute(Vertex,\ Vertex)
comment18.text=\r\n\ Gets\ the\ shortest\ path\ between\ vertex\ u\ and\ v\ as\ an\ edge\ list\r\n\r\n\ @param\ \ u\ \ The\ starting\ vertex\r\n\ @param\ \ v\ \ The\ destination\ vertex\r\n\ @return\ \ \ \ The\ shortest\ path\ between\ u\ and\ v\r\n
comment2.params=n
comment2.target=Vertex\ insertVertex(java.lang.String)
comment3.params=v
comment3.target=java.lang.String\ removeVertex(Vertex)
comment4.params=v\ w\ n
comment4.target=Edge\ insertEdge(Vertex,\ Vertex,\ java.lang.String)
comment5.params=e
comment5.target=java.lang.String\ removeEdge(Edge)
comment6.params=e\ v
comment6.target=Vertex\ opposite(Edge,\ Vertex)
comment7.params=
comment7.target=java.util.ArrayList\ vertices()
comment8.params=
comment8.target=java.util.ArrayList\ edges()
comment9.params=v\ w
comment9.target=boolean\ areAdjacent(Vertex,\ Vertex)
numComments=19
